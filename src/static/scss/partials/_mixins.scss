@mixin fluid-font-size($tween-start: 16px 400px, $tween-end: 100px 1400px, $use-mq: true) {
  $min-size: nth($tween-start, 1);
  $max-size: nth($tween-end, 1);
  $min-width: nth($tween-start, 2);
  $max-width: nth($tween-end, 2);
    @if $use-mq {
      // font-style: $min-size;
      @include mq($min-width, $max-width) {
        font-size: calc(#{$min-size} + (#{strip-units($max-size)} - #{strip-units($min-size)}) * (100vw - #{$min-width}) / (#{strip-units($max-width)} - #{strip-units($min-width)}));
      }
      @include mq($max-width) {
        font-size: $max-size;
      }
    } @else {
      font-size: calc(#{$min-size} + (#{strip-units($max-size)} - #{strip-units($min-size)}) * (100vw - #{$min-width}) / (#{strip-units($max-width)} - #{strip-units($min-width)}));
    }
}


// Reset Element
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Stripping the styles from default HTML elements
//      such as an input, ul, li, a, h1, h2, h3, etc.
// WHY: When using normalize, you might want to set
//      an element to a baseline with no style applied
// USE: @include reset(li);

.reset {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  vertical-align: baseline;
  background-color: transparent;
}

@mixin reset($el: generic) {

  $tag: (
    generic: true,
    h: true,
    ol: true,
    ul: true,
    li: true,
    button: true,
    input: true
  );

  @if map-has-key($tag, $el) {
    margin: 0;
    padding: 0;
    border: 0;
    outline: 0;
    vertical-align: baseline;
    background-color: transparent;

    @if $el == "input"
     or $el == "button" {
      box-shadow: none;
      border-radius: 0;
      -webkit-appearance: none;
      &:focus {
        outline: 0;
      }
    } // input

    @if $el == "ul"
     or $el == "ol" {
      list-style: none;
    }

  } // map-has-key

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, the element `#{$el}` isn't recognized. "
        + "Please make sure it is defined in the `reset` mixin.";
  }

} // reset



@mixin site-padding($include-vert: false, $offset: 0) {
  @if $include-vert {
    @include padding(#{15px - $offset});

    @include mq($bp--phablet, $bp--desktop) {
      @include padding(#{25px - $offset});
    }

    @include mq($bp--desktop) {
      @include padding(#{50px - $offset});
    }
  } @else {
    @include padding(n #{15px - $offset});
    @include mq($bp--phablet, $bp--desktop) {
      @include padding(n #{25px - $offset});
    }

    @include mq($bp--desktop) {
      @include padding(n #{50px - $offset});
    }
  }
}



@mixin increment-delay($offset: .05s, $count: 10, $delay: 0, $type: transition) {
  @for $i from 1 through $count {
    $time: ($i * $offset) + $delay;
    &:nth-child(#{$i}) {
      #{$type}-delay: $time;
    }
  }
}



@mixin placeholder-state($default: inherit, $hover: $c-base, $focus: $c-base) {
  // You have to declare these separately in order to work
  &::-webkit-input-placeholder {
    color: $default;
  }

  &:-moz-placeholder {
    color: $default;
  }

  &:hover::-webkit-input-placeholder {
    color: $hover;
  }

  &:hover:-moz-placeholder {
    color: $hover;
  }

  &:focus::-webkit-input-placeholder {
    color: $focus;
  }

  &:focus:-moz-placeholder {
    color: $focus;
  }
}


// Section titles
// For:
// Use:

@mixin section-divider($breakpoint: $bp--topics-col) {
  position: relative;
  font-size: 15px;
  line-height: 1;
  min-height: 40px;

  &:after {
    display: block;
    content:'';
    @include absolute(2px 0 2px 0);
    background: url('../../img/texture-diagonal-black.png');
    @include retina-bg('../../img/texture-diagonal-black-2x.png', 5px);
    border: 1px solid $c-black;
    z-index: -1;
    opacity: 0.75;
  }

  @include mq($breakpoint) {
    min-height: 1em;
  }
}

@mixin section-divider-title($breakpoint: $bp--topics-col) {
  position: relative;
  @include font($overline, 18px, 700, normal, .04em, caps);
  line-height: 1;
  display: inline-block;
  background-color: $c-white;
  margin: 0;
  padding: 2px 4px 2px 0;

  &:after {
    display: block;
    content:'';
    @include absolute(2px 0 0 n);
    border-right: 1px solid $c-black;
    opacity: 0.75;
  }
  &:before {
    display: block;
    content:'';
    @include absolute(n 0 0 0);
    border-bottom: 1px solid $c-black;
    opacity: 0.75;
  }


  @include mq($breakpoint) {
    padding: 0 6px 0 0;

    // extend the border
    &:after {
      bottom: 2px;
    }

    // add a bottom border
    &:before {
      display: none;
    }
  }
}


// Sets the appropriate offsets for carousels
//
// HINT:  carousels need to be initialized in nu_news_carousel
//        only if the screen is below a certain size. This size
//        should be $teasecount * $tease-min-width + $container-padding.
//        for the example below, this would be 1350px.


@mixin carousel-sizes($tease-count: 5, $tease-min-width: 250px, $initial-tease-display: 2, $container-padding: 100px) {

  // sets width and min-width for carousel tease;
  min-width: $tease-min-width;
  width: 100% / $initial-tease-display;

  // offsets the for loop to add the right amount of breakpoints
  $loop-start: $initial-tease-display;

  @for $i from $loop-start through $tease-count {
    // set pixel width for each breakpoint
    $bp--min: $i * $tease-min-width + $container-padding;
    $bp--max: ($i + 1) * $tease-min-width + $container-padding;

    // percentage width for current breakpoint
    $current-width: 100% / $i;

    // scope mq if not the last
    @if $i != $tease-count {
      @include mq($bp--min, $bp--max) {
        width: $current-width;
      }
    } @else {
      @include mq($bp--min) {
        width: $current-width;
      }
    }
  }
}


@mixin img-opacity($opacity: .3, $absolute: true) {
  @if $absolute == true {
    @include absolute(0);
  }
  filter: grayscale(1);
  mix-blend-mode: screen;
  opacity: $opacity;
  background-size: cover;
  background-position: 50% 50%;
}



@mixin link-hover($width: 2px, $offset: 2px, $color: currentColor) {
  position: relative;
  padding-bottom: $offset;
  transition: all .3s ease;

  &:after {
    content: '';
    @include absolute(100% 0 x);
    border-top: $width solid $color;
    transform: scaleX(0);
    transition: transform .3s ease, transform-origin 0s, opacity .1s ease .2s;
    transform-origin: 100% 0;
    opacity: 0;
  }

  &:focus,
  &:hover {
    // color: $c-orange;
    &:after {
      opacity: 1;
      transform: scaleX(1);
      transform-origin: 0 0;
      transition: transform .3s ease, transform-origin 0s, opacity .1s ease;
    }
  }

  &:active {
    color: $c-orange;
  }
}



@mixin grow-link() {
  text-decoration: none;
  position: relative;
  &:after {
    content: '';
    @include absolute(100% 0 x);
    border-top: 1px solid currentColor;
    transform: scaleX(0);
    transition: transform .3s ease, transform-origin 0s, opacity .1s ease .2s;
    transform-origin: 100% 0;
    opacity: 0;
  }

  &:hover,
  &:focus {
    &:after {
      opacity: 1;
      transform: scaleX(1);
      transform-origin: 0 0;
      transition: transform .3s ease, transform-origin 0s, opacity .1s ease;
    }
  }
}
